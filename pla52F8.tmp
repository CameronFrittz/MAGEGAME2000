[gd_scene load_steps=29 format=3 uid="uid://bhsnp72cip8du"]

[ext_resource type="Texture2D" uid="uid://be17xix2p17c4" path="res://skeleton_mage_high.png" id="1_2aoey"]

[sub_resource type="GDScript" id="GDScript_wesr1"]
resource_name = "CharacterMovement"
script/source = "extends CharacterBody2D

# Movement and Dash Properties
const SPEED: float = 100.0
const DASH_SPEED: float = 300.0
const DASH_DURATION: float = 0.15
const DASH_COOLDOWN: float = 0.55
const ATTACK_DURATION: float = 0.4  # Duration of attack animation
const FIREBALL_SPEED: float = 400.0  # Adjust this value based on game requirements


var is_knocked_back: bool = false
var knockback_velocity: Vector2 = Vector2.ZERO
var knockback_timer: float = 0
var flash_duration: float = 0.2
var is_flashing: bool = false

# Health and Mana Properties
var health: float = 100.0
var max_health: float = 100.0
var mana: float = 100.0
var max_mana: float = 100.0

# Dash Management
var dash_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_timer: float = 0.0
var is_dashing: bool = false
var is_attacking: bool = false

# Animation and Movement
var move_direction: float = 0.0
var moving: bool = false
var anim_direction: String = \"S\"
var anim_mode: String = \"Idle\"

# Reference to the HUD node
@onready var hud = get_node(\"/root/MAGEGAME/hud/\")
@onready var sprite = $Sprite2D


# Zoom properties
const MIN_ZOOM: Vector2 = Vector2(.75, .75)  # Minimum zoom level (half size)
const MAX_ZOOM: Vector2 = Vector2(2, 2)      # Maximum zoom level (double size)
const ZOOM_SPEED: float = 0.8                 # Speed of zoom adjustment
var target_zoom: Vector2 = Vector2(1, 1)      # Initial target zoom level is 1:1



func _input(event):
	if event.is_action_pressed(\"fire\"):
		print(\"Fire action detected\")
		fire_fireball()
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			# Zoom out, ensure zoom does not drop below minimum or become negative
			adjust_target_zoom(ZOOM_SPEED)
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			# Zoom in, keep within maximum bounds
			adjust_target_zoom(-ZOOM_SPEED)


func fire_fireball():
	var fireball = preload(\"res://fire_ball.tscn\")
	get_parent().add_child(fireball)  # Adding the fireball to the game
	fireball.getChild(0).position = position
	fireball.position = position  # Assuming 'position' is the player's current location
	



func adjust_target_zoom(zoom_change: float):
	##print(\"Before adjustment, target_zoom: \", target_zoom)
		# Adjust without risking negative zoom by ensuring positive results
	target_zoom += Vector2(zoom_change, zoom_change)
		# Clamp and maintain a minimum safe level to prevent issues
	target_zoom.x = max(clamp(target_zoom.x, MIN_ZOOM.x, MAX_ZOOM.x), 0.1)
	target_zoom.y = max(clamp(target_zoom.y, MIN_ZOOM.y, MAX_ZOOM.y), 0.1)
	##print(\"After adjustment, target_zoom: \", target_zoom)
	
	
func _process(delta: float):
	var camera = get_node(\"Camera2D\")
	if camera:
		# Ensure camera zoom is interpolated safely
		camera.zoom = camera.zoom.lerp(target_zoom, ZOOM_SPEED * delta)
		# Maintain a minimum zoom to avoid inversion issues
		camera.zoom.x = max(camera.zoom.x, 0.1)
		camera.zoom.y = max(camera.zoom.y, 0.1)
		##print(\"Updated camera zoom: \", camera.zoom)

		

func _ready():
	if hud:
		update_hud()
	else:
		print(\"HUD not found. Check the node path or structure.\")
		# Initialize target_zoom with the current camera zoom if needed
	var camera = get_node(\"Camera2D\")  # Ensure this path matches your Camera2D node path
	if camera:
		target_zoom = camera.zoom
		
	else:
		print(\"Cannot invert transform due to zero scale\")
	assert(scale.x != 0 and scale.y != 0, \"Scale should not be zero to avoid inversion errors.\")
	target_zoom = Vector2(1, 1)  # Ensure starting at a reasonable zoom level
	##print(\"Initial target_zoom: \", target_zoom)
	flash_timer = Timer.new()  # Create a new Timer instance
	flash_timer.wait_time = flash_duration  # Set the wait time
	flash_timer.one_shot = true  # Ensure it fires only once
	flash_timer.timeout.connect(stop_flash)  # Connect timeout signal to stop_flash
	add_child(flash_timer)  # Add the Timer as a child of the current node
		
func _physics_process(delta: float) -> void:
	if is_knocked_back:
		knockback_timer -= delta
		if knockback_timer <= 0:
			is_knocked_back = false
			knockback_velocity = Vector2.ZERO  # Reset knockback velocity
		velocity = knockback_velocity
	else:
		handle_dash(delta)
		handle_attack(delta)
		handle_movement(delta) # Handle normal movement if not knocked back

	move_and_slide()  # Apply the velocity
	AnimationLoop()
	if is_attacking == false:
		$AttackArea.set_monitoring(false)

func handle_movement(_delta: float) -> void:
	if not is_dashing and not is_attacking:
		var input_vector: Vector2 = Vector2.ZERO
		input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
		input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

		if input_vector.length() > 0:
			input_vector = input_vector.normalized()
			moving = true
			move_direction = rad_to_deg(input_vector.angle())  # Convert radian to degree
		else:
			moving = false

		self.velocity = input_vector * SPEED
	move_and_slide()

func handle_dash(delta: float) -> void:
	if is_dashing:
		dash_timer -= delta
		if dash_timer <= 0:
			is_dashing = false
			update_post_dash_velocity()

	dash_cooldown_timer -= delta

	if Input.is_action_just_pressed(\"dash\") and dash_cooldown_timer <= 0 and not is_dashing and not is_attacking:
		start_dash()

func start_dash() -> void:
	var dash_direction: Vector2 = Vector2.ZERO
	dash_direction.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	dash_direction.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if dash_direction.length() == 0:
		# Default dash in the current facing direction if no input
		dash_direction = Vector2(cos(deg_to_rad(move_direction)), sin(deg_to_rad(move_direction)))

	dash_direction = dash_direction.normalized()
	self.velocity = dash_direction * DASH_SPEED
	is_dashing = true
	dash_timer = DASH_DURATION
	dash_cooldown_timer = DASH_COOLDOWN + DASH_DURATION
	moving = true

	
func handle_attack(delta: float) -> void:
	attack_timer -= delta
	if attack_timer <= 0 and is_attacking:
		is_attacking = false

	if Input.is_action_just_pressed(\"attack\") and not is_attacking and not is_dashing:
		start_attack()

func start_attack() -> void:
	is_attacking = true
	attack_timer = ATTACK_DURATION
	self.velocity = Vector2.ZERO
	$AttackArea.set_monitoring(true)
	# No need to set moving here since the attack animation takes precedence
	


func update_post_dash_velocity() -> void:
	var input_vector: Vector2 = Vector2.ZERO
	input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if input_vector.length() > 0:
		input_vector = input_vector.normalized()
		self.velocity = input_vector * SPEED
	else:
		self.velocity = Vector2.ZERO

func AnimationLoop():
	if is_attacking:
		# Choose the attack animation based on the last known movement direction
		var attack_anim = \"Melee_\" + anim_direction
		get_node(\"AnimationPlayer\").play(attack_anim)
	else:
		# Continue with movement or idle animations
		if moving:
			if move_direction >= -15 and move_direction < 15:
				anim_direction = \"E\"
			elif move_direction >= 15 and move_direction < 60:
				anim_direction = \"SE\"
			elif move_direction >= 60 and move_direction < 120:
				anim_direction = \"S\"
			elif move_direction >= 120 and move_direction < 165:
				anim_direction = \"SW\"
			elif move_direction >= -60 and move_direction < -15:
				anim_direction = \"NE\"
			elif move_direction >= -120 and move_direction < -60:
				anim_direction = \"N\"
			elif move_direction >= -165 and move_direction < -120:
				anim_direction = \"NW\"
			elif move_direction >= 165 or move_direction < -165:
				anim_direction = \"W\"
			anim_mode = \"Walk\"
		else:
			anim_mode = \"Idle\"

		var animation_name = anim_mode + \"_\" + anim_direction
		get_node(\"AnimationPlayer\").play(animation_name)

# Update HUD with current health and mana
func update_hud() -> void:
	if hud:
		hud.update_health(health, max_health)
		hud.update_mana(mana, max_mana)
	else:
		print(\"HUD is not available at this time.\")


func _on_attack_area_area_entered(area):
		print(\"Area entered by: \", area.name)
		if area.is_in_group(\"enemies\"):
			print(\"Enemy hit detected.\")
		area.get_parent().call(\"apply_damage\", 10)
		
		
func apply_damage(damage_amount: int):
	health -= damage_amount
	start_flash()
	if health <= 0:
		die()
	# Optionally update the HUD or trigger any visual effect
	update_hud()  # Refresh HUD display to show the new health value
	print(\"Player damaged: Health remaining \", health)

func apply_knockback(source_position: Vector2, power: float):
	var direction = (global_position - source_position).normalized()
	knockback_velocity = direction * power
	is_knocked_back = true
	knockback_timer = 0.2  # Duration of the knockback effect in seconds
	# Disable other actions during knockback
	is_dashing = false
	is_attacking = false

var flash_timer: Timer

func start_flash():
	sprite.modulate = Color(1, 0, 0)
	flash_timer.start()

func stop_flash():
	sprite.modulate = Color(1, 1, 1)


func die():
	queue_free()  # Remove the Player from the scene or handle death
	print(\"Player has died\")
"

[sub_resource type="Animation" id="Animation_3i2lq"]
resource_name = "Idle_E"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [112, 113, 114, 115, 114, 113]
}

[sub_resource type="Animation" id="Animation_7hu3d"]
resource_name = "Idle_N"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [56, 57, 58, 59, 58, 57]
}

[sub_resource type="Animation" id="Animation_r5ik8"]
resource_name = "Idle_NE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [84, 85, 86, 87, 86, 85]
}

[sub_resource type="Animation" id="Animation_6cj71"]
resource_name = "Idle_NW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [28, 29, 30, 31, 30, 29]
}

[sub_resource type="Animation" id="Animation_lewys"]
resource_name = "Idle_S"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [168, 169, 170, 171, 170, 169]
}

[sub_resource type="Animation" id="Animation_vfo53"]
resource_name = "Idle_SE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [140, 141, 142, 143, 142, 141]
}

[sub_resource type="Animation" id="Animation_iysvl"]
resource_name = "Idle_SW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [196, 197, 198, 199, 198, 197]
}

[sub_resource type="Animation" id="Animation_5dt8w"]
resource_name = "Idle_W"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 2, 1]
}

[sub_resource type="Animation" id="Animation_anl57"]
resource_name = "Melee_E"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [124, 125, 126, 127, 128]
}

[sub_resource type="Animation" id="Animation_qicak"]
resource_name = "Melee_N"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [68, 69, 70, 71, 72]
}

[sub_resource type="Animation" id="Animation_oc22q"]
resource_name = "Melee_NE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [96, 97, 98, 99, 100]
}

[sub_resource type="Animation" id="Animation_htqhx"]
resource_name = "Melee_NW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [40, 41, 42, 43, 44]
}

[sub_resource type="Animation" id="Animation_05pa4"]
resource_name = "Melee_S"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [180, 181, 182, 183, 184]
}

[sub_resource type="Animation" id="Animation_plnnu"]
resource_name = "Melee_SE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [152, 153, 154, 155, 156]
}

[sub_resource type="Animation" id="Animation_tpvkt"]
resource_name = "Melee_SW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [208, 209, 210, 211, 212]
}

[sub_resource type="Animation" id="Animation_hajc2"]
resource_name = "Melee_W"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [12, 13, 14, 15, 16]
}

[sub_resource type="Animation" id="Animation_lp6gn"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}

[sub_resource type="Animation" id="Animation_d726y"]
resource_name = "Walk_E"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [116, 117, 118, 119, 120, 121, 122, 123]
}

[sub_resource type="Animation" id="Animation_bweqv"]
resource_name = "Walk_N"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [60, 61, 62, 63, 64, 65, 66, 67]
}

[sub_resource type="Animation" id="Animation_hjuoo"]
resource_name = "Walk_NE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [88, 89, 90, 91, 92, 93, 94, 95]
}

[sub_resource type="Animation" id="Animation_08wxv"]
resource_name = "Walk_NW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [32, 33, 34, 35, 36, 37, 38, 39]
}

[sub_resource type="Animation" id="Animation_03p2a"]
resource_name = "Walk_S"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [172, 173, 174, 175, 176, 177, 178, 179]
}

[sub_resource type="Animation" id="Animation_a1mkv"]
resource_name = "Walk_SE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [144, 145, 146, 147, 148, 149, 150, 151]
}

[sub_resource type="Animation" id="Animation_web34"]
resource_name = "Walk_SW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [200, 201, 202, 203, 204, 205, 206, 207]
}

[sub_resource type="Animation" id="Animation_u4w1h"]
resource_name = "Walk_W"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [4, 5, 6, 7, 8, 9, 10, 11]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_glaps"]
_data = {
"Idle_E": SubResource("Animation_3i2lq"),
"Idle_N": SubResource("Animation_7hu3d"),
"Idle_NE": SubResource("Animation_r5ik8"),
"Idle_NW": SubResource("Animation_6cj71"),
"Idle_S": SubResource("Animation_lewys"),
"Idle_SE": SubResource("Animation_vfo53"),
"Idle_SW": SubResource("Animation_iysvl"),
"Idle_W": SubResource("Animation_5dt8w"),
"Melee_E": SubResource("Animation_anl57"),
"Melee_N": SubResource("Animation_qicak"),
"Melee_NE": SubResource("Animation_oc22q"),
"Melee_NW": SubResource("Animation_htqhx"),
"Melee_S": SubResource("Animation_05pa4"),
"Melee_SE": SubResource("Animation_plnnu"),
"Melee_SW": SubResource("Animation_tpvkt"),
"Melee_W": SubResource("Animation_hajc2"),
"RESET": SubResource("Animation_lp6gn"),
"Walk_E": SubResource("Animation_d726y"),
"Walk_N": SubResource("Animation_bweqv"),
"Walk_NE": SubResource("Animation_hjuoo"),
"Walk_NW": SubResource("Animation_08wxv"),
"Walk_S": SubResource("Animation_03p2a"),
"Walk_SE": SubResource("Animation_a1mkv"),
"Walk_SW": SubResource("Animation_web34"),
"Walk_W": SubResource("Animation_u4w1h")
}

[node name="Player" type="CharacterBody2D"]
z_index = 4
y_sort_enabled = true
position = Vector2(-233, 130)
collision_layer = 3
collision_mask = 3
script = SubResource("GDScript_wesr1")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
y_sort_enabled = true
position = Vector2(-1, -13)
scale = Vector2(0.847194, 2.83933)
polygon = PackedVector2Array(-2.61988, -3.47826, -4, 6, 8.51462, 4.86956, 7.85965, -3.47826)

[node name="Sprite2D" type="Sprite2D" parent="."]
y_sort_enabled = true
position = Vector2(1, -19)
scale = Vector2(0.63, 0.63)
texture = ExtResource("1_2aoey")
hframes = 28
vframes = 8
frame = 4

[node name="Camera2D" type="Camera2D" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_glaps")
}

[node name="AttackArea" type="Area2D" parent="."]
z_index = 4
y_sort_enabled = true
collision_mask = 2
monitorable = false

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="AttackArea"]
z_index = 4
y_sort_enabled = true
polygon = PackedVector2Array(-24, -19, 22, -22, 20, -37, -26, -34)

[connection signal="area_entered" from="AttackArea" to="." method="_on_attack_area_area_entered"]
