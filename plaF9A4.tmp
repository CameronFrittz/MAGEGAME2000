[gd_scene load_steps=29 format=3 uid="uid://bhsnp72cip8du"]

[ext_resource type="Texture2D" uid="uid://be17xix2p17c4" path="res://skeleton_mage_high.png" id="1_2aoey"]

[sub_resource type="GDScript" id="GDScript_wesr1"]
resource_name = "CharacterMovement"
script/source = "extends CharacterBody2D

# Constants for movement, attack, and mana properties
const SPEED: float = 100.0
const DASH_SPEED: float = 300.0
const DASH_DURATION: float = 0.15
const DASH_COOLDOWN: float = 0.55
const ATTACK_DURATION: float = 0.4  # Duration of attack animation
const FIREBALL_SPEED: float = 400.0
const FIREBALL_MANA_COST = 20  
const MANA_REGEN_RATE: float = 3.0  # Mana regeneration rate per second
const DAMAGE_COOLDOWN = 3.0  # 3 seconds cooldown
var damage_cooldown_timer: float = 0.0

# Preloaded scenes and instances
var fireball_scene = preload(\"res://fireball.tscn\")
var reticle_scene = preload(\"res://reticle.tscn\")
var reticle_instance = null

# State management
var is_knocked_back: bool = false
var knockback_velocity: Vector2 = Vector2.ZERO
var knockback_timer: float = 0
var flash_duration: float = 0.2
var is_flashing: bool = false
var is_dashing: bool = false
var is_attacking: bool = false
var is_firing: bool = false
var using_mouse: bool = true
var reset_reticle_pressed: bool = false

# Health and Mana Properties
var health: float = 100.0
var max_health: float = 100.0
var mana: float = 100.0
var max_mana: float = 100.0

# Timing for actions
var dash_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_timer: float = 0.0
var last_damage_time: float = -3.0  # Track the last time damage was applied

# Animation and movement
var move_direction: float = 0.0
var moving: bool = false
var anim_direction: String = \"S\"
var anim_mode: String = \"Idle\"

# HUD and sprite references
@onready var hud = get_node(\"/root/MAGEGAME/hud/\")
@onready var sprite = $Sprite2D

# Zoom properties for camera control
const ZOOM_LEVELS: Array = [Vector2(0.4, 0.4), Vector2(0.6, 0.6), Vector2(0.8, 0.8), Vector2(1.0, 1.0), Vector2(1.2, 1.2), Vector2(1.4, 1.4), Vector2(1.6, 1.6), Vector2(1.8, 1.8), Vector2(2.0, 2.0), Vector2(2.2, 2.2)]
const ZOOM_SPEED: float = 3
var current_zoom_index: int = 4  # Default to the middle zoom level
var target_zoom: Vector2 = ZOOM_LEVELS[current_zoom_index]

# Joystick sensitivity
const JOYSTICK_SENSITIVITY: float = 325.0  # Adjust as needed

# Process input for various actions
func _input(event):
	if event.is_action_pressed(\"fire\"):
		if not reticle_instance:
			reticle_instance = reticle_scene.instantiate()
		if not reticle_instance.is_inside_tree():
			add_child(reticle_instance)
		is_firing = true
		# Determine if the mouse is on screen
		if is_mouse_on_screen():
			using_mouse = true
		else:
			using_mouse = false
	elif event.is_action_released(\"fire\"):
		if reticle_instance and reticle_instance.is_inside_tree():
			fire_fireball(reticle_instance.global_position)
			remove_child(reticle_instance)
		is_firing = false
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			change_zoom_level(1)
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			change_zoom_level(-1)

	if Input.is_action_just_pressed(\"reset_reticle\"):
		if not reset_reticle_pressed:
			reset_reticle_position()
			reset_reticle_pressed = true
	elif Input.is_action_just_released(\"reset_reticle\"):
		reset_reticle_pressed = false
	  # Handle zoom in and zoom out actions
	if Input.is_action_just_pressed(\"zoom_in\"):
		change_zoom_level(-1)  # Zoom in by moving to a smaller zoom level
	elif Input.is_action_just_pressed(\"zoom_out\"):
		change_zoom_level(1)  # Zoom out by moving to a larger zoom level


# Toggle pause state and show/hide pause menu


# Reset reticle position to player's position
func reset_reticle_position():
	if reticle_instance and reticle_instance.is_inside_tree():
		reticle_instance.global_position = global_position

# Helper function to determine if the mouse is on screen
func is_mouse_on_screen() -> bool:
	var viewport_size = get_viewport().get_visible_rect().size
	var mouse_pos = get_viewport().get_mouse_position()
	return mouse_pos.x >= 0 and mouse_pos.y >= 0 and mouse_pos.x <= viewport_size.x and mouse_pos.y <= viewport_size.y

# Fire a fireball towards a target
func fire_fireball(target_position):
	if mana >= FIREBALL_MANA_COST:
		if fireball_scene:
			var fireball_instance = fireball_scene.instantiate()
			fireball_instance.position = position
			fireball_instance.rotation = (target_position - position).angle()
			get_parent().add_child(fireball_instance)
			mana -= FIREBALL_MANA_COST
			update_mana_display()
		else:
			print(\"Fireball scene not preloaded.\")
	else:
		print(\"Not enough mana to cast fireball.\")

# Update mana display on the HUD
func update_mana_display():
	hud.update_mana(mana, max_mana)

# Change the zoom level based on input
func change_zoom_level(change: int):
	current_zoom_index = clamp(current_zoom_index + change, 0, ZOOM_LEVELS.size() - 1)
	target_zoom = ZOOM_LEVELS[current_zoom_index]

# Process function to manage timed updates
func _process(delta: float):
	var camera = get_node(\"Camera2D\")
	if camera:
		camera.zoom = camera.zoom.lerp(target_zoom, ZOOM_SPEED * delta)

	# Regenerate mana
	if mana < max_mana:
		mana += MANA_REGEN_RATE * delta
		mana = min(mana, max_mana)  # Ensure mana does not exceed max
		update_mana_display()  # Update HUD with new mana level
	if damage_cooldown_timer > 0:
		damage_cooldown_timer -= delta

	# Update reticle position based on input
	if is_firing:
		if using_mouse:
			update_reticle_position_with_mouse()
		else:
			update_reticle_position_with_joystick(delta)

# Update reticle position based on mouse position
func update_reticle_position_with_mouse():
	if reticle_instance and reticle_instance.is_inside_tree():
		reticle_instance.global_position = get_global_mouse_position()

# Update reticle position based on joystick direction
func update_reticle_position_with_joystick(delta: float):
	var joystick_direction_x = Input.get_action_strength(\"ui_right_stick_x\") - Input.get_action_strength(\"ui_left_stick_x\")
	var joystick_direction_y = Input.get_action_strength(\"ui_down_stick_y\") - Input.get_action_strength(\"ui_up_stick_y\")
	var joystick_direction = Vector2(joystick_direction_x, joystick_direction_y) * JOYSTICK_SENSITIVITY

	print(\"Joystick Direction X: \", joystick_direction_x)
	print(\"Joystick Direction Y: \", joystick_direction_y)

	# Ensure the joystick direction takes both positive and negative values
	if reticle_instance and reticle_instance.is_inside_tree():
		reticle_instance.position += joystick_direction * delta

		# Ensure the reticle stays within the viewport
		var viewport_rect = get_viewport_rect()
		reticle_instance.position.x = clamp(reticle_instance.position.x, -999, viewport_rect.size.x)
		reticle_instance.position.y = clamp(reticle_instance.position.y, -999, viewport_rect.size.y)

		print(\"Reticle Position: \", reticle_instance.position)  # Debug print

# Initial setup of the scene
func _ready():
	if hud:
		update_hud()
	else:
		print(\"HUD not found. Check the node path or structure.\")
	var camera = get_node(\"Camera2D\")
	if camera:
		target_zoom = camera.zoom
	else:
		print(\"Cannot invert transform due to zero scale\")
	assert(scale.x != 0 and scale.y != 0, \"Scale should not be zero to avoid inversion errors.\")
	target_zoom = Vector2(1, 1)
	flash_timer = Timer.new()
	flash_timer.wait_time = flash_duration
	flash_timer.one_shot = true
	flash_timer.timeout.connect(stop_flash)
	add_child(flash_timer)

# Manage physical movements and attacks
func _physics_process(delta: float) -> void:
	if is_knocked_back:
		knockback_timer -= delta
		if knockback_timer <= 0:
			is_knocked_back = false
			knockback_velocity = Vector2.ZERO
		velocity = knockback_velocity
	else:
		handle_dash(delta)
		handle_attack(delta)
		handle_movement(delta)

	move_and_slide()  # Apply the calculated velocity
	AnimationLoop()
	if not is_attacking:
		$AttackArea.set_monitoring(false)

# Handle movement based on player input
func handle_movement(_delta: float) -> void:
	if not is_dashing and not is_attacking:
		var input_vector: Vector2 = Vector2.ZERO
		input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
		input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

		if input_vector.length() > 0:
			input_vector = input_vector.normalized()
			moving = true
			move_direction = rad_to_deg(input_vector.angle())
		else:
			moving = false

		self.velocity = input_vector * SPEED
	move_and_slide()

# Handle dashing mechanics
func handle_dash(delta: float) -> void:
	if is_dashing:
		dash_timer -= delta
		if dash_timer <= 0:
			is_dashing = false
			update_post_dash_velocity()

	dash_cooldown_timer -= delta

	if Input.is_action_just_pressed(\"dash\") and dash_cooldown_timer <= 0 and not is_dashing and not is_attacking:
		start_dash()

# Start a dash movement
func start_dash() -> void:
	var dash_direction: Vector2 = Vector2.ZERO
	dash_direction.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	dash_direction.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if dash_direction.length() == 0:
		dash_direction = Vector2(cos(deg_to_rad(move_direction)), sin(deg_to_rad(move_direction)))

	dash_direction = dash_direction.normalized()
	self.velocity = dash_direction * DASH_SPEED
	is_dashing = true
	dash_timer = DASH_DURATION
	dash_cooldown_timer = DASH_COOLDOWN + DASH_DURATION
	moving = true

# Handle attack mechanics
func handle_attack(delta: float) -> void:
	attack_timer -= delta
	if attack_timer <= 0 and is_attacking:
		is_attacking = false

	if Input.is_action_just_pressed(\"attack\") and not is_attacking and not is_dashing:
		start_attack()

# Start an attack sequence
func start_attack() -> void:
	is_attacking = true
	attack_timer = ATTACK_DURATION
	self.velocity = Vector2.ZERO
	$AttackArea.set_monitoring(true)

# Update velocity after dashing
func update_post_dash_velocity() -> void:
	var input_vector: Vector2 = Vector2.ZERO
	input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if input_vector.length() > 0:
		input_vector = input_vector.normalized()
		self.velocity = input_vector * SPEED
	else:
		self.velocity = Vector2.ZERO

# Manage animations based on state
func AnimationLoop():
	if is_attacking:
		var attack_anim = \"Melee_\" + anim_direction
		get_node(\"AnimationPlayer\").play(attack_anim)
	else:
		if moving:
			if move_direction >= -15 and move_direction < 15:
				anim_direction = \"E\"
			elif move_direction >= 15 and move_direction < 60:
				anim_direction = \"SE\"
			elif move_direction >= 60 and move_direction < 120:
				anim_direction = \"S\"
			elif move_direction >= 120 and move_direction < 165:
				anim_direction = \"SW\"
			elif move_direction >= -60 and move_direction < -15:
				anim_direction = \"NE\"
			elif move_direction >= -120 and move_direction < -60:
				anim_direction = \"N\"
			elif move_direction >= -165 and move_direction < -120:
				anim_direction = \"NW\"
			elif move_direction >= 165 or move_direction < -165:
				anim_direction = \"W\"
			anim_mode = \"Walk\"
		else:
			anim_mode = \"Idle\"

		var animation_name = anim_mode + \"_\" + anim_direction
		get_node(\"AnimationPlayer\").play(animation_name)

# Update HUD with current health and mana
func update_hud() -> void:
	if hud:
		hud.update_health(health, max_health)
		hud.update_mana(mana, max_mana)
	else:
		print(\"HUD not found. Check the node path or structure.\")

# Detect enemy hits within attack area
func _on_attack_area_area_entered(area):
	if area.is_in_group(\"enemies\"):
		print(\"Enemy hit detected.\")
	var enemy = area
	while enemy and not enemy.has_method(\"apply_damage\"):
		enemy = enemy.get_parent()
	if enemy:
		enemy.apply_damage(randf_range(40,80))
	else:
		print(\"apply_damage method not found in the parent hierarchy\")

# Apply damage function with cooldown check and vibration
func apply_damage(damage_amount: int):
	if damage_cooldown_timer <= 0:
		health -= damage_amount
		damage_cooldown_timer = DAMAGE_COOLDOWN  # Reset cooldown timer
		start_flash()
		if health <= 0:
			die()
		update_hud()
		print(\"Player damaged: Health remaining \", health)

		# Start controller vibration
		start_controller_vibration(0.5, 1.0, 1.0)  # Example values, adjust as needed

# Asynchronous function to handle controller vibration
func start_controller_vibration(duration: float, weak_magnitude: float, strong_magnitude: float):
	# Iterate through all connected joypads
	for joypad_id in Input.get_connected_joypads():
		Input.start_joy_vibration(joypad_id, weak_magnitude, strong_magnitude, duration)

	# Wait for the specified duration before stopping the vibration
	await get_tree().create_timer(duration).timeout
	for joypad_id in Input.get_connected_joypads():
		Input.stop_joy_vibration(joypad_id)



# Apply knockback to the player
func apply_knockback(source_position: Vector2, power: float):
	var direction = (global_position - source_position).normalized()
	knockback_velocity = direction * power
	is_knocked_back = true
	knockback_timer = 0.2
	is_dashing = false
	is_attacking = false

# Timer for visual effects
var flash_timer: Timer

# Start flashing effect on taking damage
func start_flash():
	sprite.modulate = Color(1, 0, 0)
	flash_timer.start()

# Stop flashing effect
func stop_flash():
	sprite.modulate = Color(1, 1, 1)

# Handle player death
func die():
	queue_free()
	print(\"Player has died\")
"

[sub_resource type="Animation" id="Animation_3i2lq"]
resource_name = "Idle_E"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [112, 113, 114, 115, 114, 113]
}

[sub_resource type="Animation" id="Animation_7hu3d"]
resource_name = "Idle_N"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [56, 57, 58, 59, 58, 57]
}

[sub_resource type="Animation" id="Animation_r5ik8"]
resource_name = "Idle_NE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [84, 85, 86, 87, 86, 85]
}

[sub_resource type="Animation" id="Animation_6cj71"]
resource_name = "Idle_NW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [28, 29, 30, 31, 30, 29]
}

[sub_resource type="Animation" id="Animation_lewys"]
resource_name = "Idle_S"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [168, 169, 170, 171, 170, 169]
}

[sub_resource type="Animation" id="Animation_vfo53"]
resource_name = "Idle_SE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [140, 141, 142, 143, 142, 141]
}

[sub_resource type="Animation" id="Animation_iysvl"]
resource_name = "Idle_SW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [196, 197, 198, 199, 198, 197]
}

[sub_resource type="Animation" id="Animation_5dt8w"]
resource_name = "Idle_W"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 2, 1]
}

[sub_resource type="Animation" id="Animation_anl57"]
resource_name = "Melee_E"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [124, 125, 126, 127, 128]
}

[sub_resource type="Animation" id="Animation_qicak"]
resource_name = "Melee_N"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [68, 69, 70, 71, 72]
}

[sub_resource type="Animation" id="Animation_oc22q"]
resource_name = "Melee_NE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [96, 97, 98, 99, 100]
}

[sub_resource type="Animation" id="Animation_htqhx"]
resource_name = "Melee_NW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [40, 41, 42, 43, 44]
}

[sub_resource type="Animation" id="Animation_05pa4"]
resource_name = "Melee_S"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [180, 181, 182, 183, 184]
}

[sub_resource type="Animation" id="Animation_plnnu"]
resource_name = "Melee_SE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [152, 153, 154, 155, 156]
}

[sub_resource type="Animation" id="Animation_tpvkt"]
resource_name = "Melee_SW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [208, 209, 210, 211, 212]
}

[sub_resource type="Animation" id="Animation_hajc2"]
resource_name = "Melee_W"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [12, 13, 14, 15, 16]
}

[sub_resource type="Animation" id="Animation_lp6gn"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}

[sub_resource type="Animation" id="Animation_d726y"]
resource_name = "Walk_E"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [116, 117, 118, 119, 120, 121, 122, 123]
}

[sub_resource type="Animation" id="Animation_bweqv"]
resource_name = "Walk_N"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [60, 61, 62, 63, 64, 65, 66, 67]
}

[sub_resource type="Animation" id="Animation_hjuoo"]
resource_name = "Walk_NE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [88, 89, 90, 91, 92, 93, 94, 95]
}

[sub_resource type="Animation" id="Animation_08wxv"]
resource_name = "Walk_NW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [32, 33, 34, 35, 36, 37, 38, 39]
}

[sub_resource type="Animation" id="Animation_03p2a"]
resource_name = "Walk_S"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [172, 173, 174, 175, 176, 177, 178, 179]
}

[sub_resource type="Animation" id="Animation_a1mkv"]
resource_name = "Walk_SE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [144, 145, 146, 147, 148, 149, 150, 151]
}

[sub_resource type="Animation" id="Animation_web34"]
resource_name = "Walk_SW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [200, 201, 202, 203, 204, 205, 206, 207]
}

[sub_resource type="Animation" id="Animation_u4w1h"]
resource_name = "Walk_W"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [4, 5, 6, 7, 8, 9, 10, 11]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_glaps"]
_data = {
"Idle_E": SubResource("Animation_3i2lq"),
"Idle_N": SubResource("Animation_7hu3d"),
"Idle_NE": SubResource("Animation_r5ik8"),
"Idle_NW": SubResource("Animation_6cj71"),
"Idle_S": SubResource("Animation_lewys"),
"Idle_SE": SubResource("Animation_vfo53"),
"Idle_SW": SubResource("Animation_iysvl"),
"Idle_W": SubResource("Animation_5dt8w"),
"Melee_E": SubResource("Animation_anl57"),
"Melee_N": SubResource("Animation_qicak"),
"Melee_NE": SubResource("Animation_oc22q"),
"Melee_NW": SubResource("Animation_htqhx"),
"Melee_S": SubResource("Animation_05pa4"),
"Melee_SE": SubResource("Animation_plnnu"),
"Melee_SW": SubResource("Animation_tpvkt"),
"Melee_W": SubResource("Animation_hajc2"),
"RESET": SubResource("Animation_lp6gn"),
"Walk_E": SubResource("Animation_d726y"),
"Walk_N": SubResource("Animation_bweqv"),
"Walk_NE": SubResource("Animation_hjuoo"),
"Walk_NW": SubResource("Animation_08wxv"),
"Walk_S": SubResource("Animation_03p2a"),
"Walk_SE": SubResource("Animation_a1mkv"),
"Walk_SW": SubResource("Animation_web34"),
"Walk_W": SubResource("Animation_u4w1h")
}

[node name="Player" type="CharacterBody2D"]
z_index = 4
y_sort_enabled = true
position = Vector2(-1, 14)
collision_layer = 3
collision_mask = 3
script = SubResource("GDScript_wesr1")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
y_sort_enabled = true
position = Vector2(-1, -13)
scale = Vector2(0.847194, 2.83933)
polygon = PackedVector2Array(-2.61988, -3.47826, -4, 6, 8.51462, 4.86956, 7.85965, -3.47826)

[node name="Sprite2D" type="Sprite2D" parent="."]
y_sort_enabled = true
position = Vector2(1, -19)
scale = Vector2(0.63, 0.63)
texture = ExtResource("1_2aoey")
hframes = 28
vframes = 8
frame = 4

[node name="Camera2D" type="Camera2D" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_glaps")
}

[node name="AttackArea" type="Area2D" parent="."]
z_index = 4
y_sort_enabled = true
collision_mask = 2
monitorable = false

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="AttackArea"]
z_index = 4
y_sort_enabled = true
position = Vector2(-6, 23)
rotation = 0.0508076
scale = Vector2(2.30205, 1)
polygon = PackedVector2Array(-19.1623, -20.7865, -6.42667, -15.2684, 6.61045, -15.7932, 23.1329, -35.7506, 14.64, -65.7965, -0.161915, -86.0922, -13.9931, -62.4446, -16.9785, -40.0667)

[connection signal="area_entered" from="AttackArea" to="." method="_on_attack_area_area_entered"]
