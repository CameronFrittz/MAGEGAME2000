[gd_scene load_steps=48 format=3 uid="uid://bhsnp72cip8du"]

[ext_resource type="Shader" path="res://SHADERS/outline.gdshader" id="1_0vyox"]
[ext_resource type="Texture2D" uid="uid://be17xix2p17c4" path="res://SPRITES/skeleton_mage_high.png" id="1_2aoey"]
[ext_resource type="AudioStream" uid="uid://06ei3vwc5lou" path="res://SFX/Whip_Whoosh_BW.11029.wav" id="3_1edxq"]
[ext_resource type="AudioStream" uid="uid://cgbqi6vsvkxjg" path="res://SFX/FireballPassByHeavy_SFXB._1.wav" id="4_qg008"]
[ext_resource type="AudioStream" uid="uid://1deeyh63h0vv" path="res://SFX/Scurry.wav" id="5_i2e14"]
[ext_resource type="Script" path="res://fireball_spawner.gd" id="6_8tcqq"]
[ext_resource type="AudioStream" uid="uid://c4nqwuiu52qg" path="res://SFX/Wince.wav" id="7_dj186"]
[ext_resource type="AudioStream" uid="uid://k3bvbkmexk4k" path="res://SFX/Footstep.wav" id="7_fqp02"]
[ext_resource type="Script" path="res://freeze_reticle_spawner.gd" id="7_p1r25"]
[ext_resource type="AudioStream" uid="uid://b5r0maxct8boj" path="res://SFX/ZombieVictimGroan.wav" id="8_c81l1"]
[ext_resource type="FontFile" uid="uid://bj0kuqitt4phg" path="res://SPRITES/alagard.ttf" id="8_uglhr"]
[ext_resource type="Texture2D" uid="uid://ctxfl6cy5y64u" path="res://SPRITES/Flashlight.png" id="10_cjekt"]

[sub_resource type="GDScript" id="GDScript_48d8e"]
script/source = "extends CharacterBody2D

# Constants for movement, attack, and mana properties
const SPEED: float = 100.0
const DASH_SPEED: float = 300.0
const DASH_DURATION: float = 0.20
const DASH_COOLDOWN: float = 0.55
const ATTACK_DURATION: float = 0.4  # Duration of attack animation
const FIREBALL_SPEED: float = 400.0
const FIREBALL_MANA_COST = 8  
const MANA_REGEN_RATE: float = 3.0  # Mana regeneration rate per second
const DAMAGE_COOLDOWN = 1  # 3 seconds cooldown
var damage_cooldown_timer: float = 0.0
@export var enemyattackdamage = randf_range(30, 45)
@onready var playercamera = $Camera2D as Camera2D


# Preloaded scenes and instances
var fireball_scene = preload(\"res://fireball.tscn\")    
var reticle_scene = preload(\"res://reticle.tscn\")
var freeze_reticle_scene = preload(\"res://FreezeReticle.tscn\")  # Updated preload
var reticle_instance = null
var stun_reticle_texture = preload(\"res://SPRITES/StunReticle.png\")  # Texture for the freeze effect visualization

# Constants and variables for the freeze ability
const FREEZE_RADIUS: float = 150.0  # Adjust this for your game's scale
const FREEZE_DURATION: float = 3.5
const FREEZE_COOLDOWN: float = 5.0
var freeze_cooldown_timer: float = 0.0
var freeze_reticle: Area2D = null  # Variable to hold the freeze reticle instance
const FREEZE_MANA_COST: int = 10  # Mana cost for using the freeze ability

# State management
var is_knocked_back: bool = false
var knockback_velocity: Vector2 = Vector2.ZERO
var knockback_timer: float = 0
var flash_duration: float = 0.2
var is_flashing: bool = false
var is_dashing: bool = false
var is_attacking: bool = false
var is_firing: bool = false
var using_mouse: bool = true
var reset_reticle_pressed: bool = false
var is_aiming_freeze: bool = false

# Health and Mana Properties
@export var health: float = 10.0
@export var max_health: float = 100.0
@export var mana: float = 100.0
@export var max_mana: float = 100.0

# Timing for actions
var dash_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_timer: float = 0.0
var last_damage_time: float = -3.0  # Track the last time damage was applied

# Animation and movement
var move_direction: float = 0.0
var moving: bool = false
var anim_direction: String = \"S\"
var anim_mode: String = \"Idle\"

# HUD and sprite references
@onready var hud = get_node(\"/root/MAGEGAME/hud/\")
@onready var sprite = $Sprite2D
@onready var game_manager = get_node(\"/root/GameManager\")  # Reference to the GameManager
@onready var MultiplayerController = get_node(\"/root/Control\")
@onready var spin_flashlight = %SpinFlashlight
# Zoom properties for camera control
const ZOOM_LEVELS: Array = [Vector2(0.4, 0.4), Vector2(0.6, 0.6), Vector2(0.8, 0.8), Vector2(1.0, 1.0), Vector2(1.2, 1.2), Vector2(1.4, 1.4), Vector2(1.6, 1.6), Vector2(1.8, 1.8), Vector2(2.0, 2.0), Vector2(2.2, 2.2)]
const ZOOM_SPEED: float = 3
var current_zoom_index: int = 4  # Default to the middle zoom level
var target_zoom: Vector2 = ZOOM_LEVELS[current_zoom_index]

# Joystick sensitivity
const JOYSTICK_SENSITIVITY: float = 325.0  # Adjust as needed

# Process input for various actions
func _input(event): 
	if event.is_action_pressed(\"fire\"):
		if not reticle_instance:
			reticle_instance = reticle_scene.instantiate()
		if not reticle_instance.is_inside_tree():
			add_child(reticle_instance)
			reticle_instance.z_index = 0  # Set the z_index here
		is_firing = true
		# Determine if the mouse is on screen
		if is_mouse_on_screen():
			using_mouse = true
		else:
			using_mouse = false
	elif event.is_action_released(\"fire\"):
		if reticle_instance and reticle_instance.is_inside_tree():
			fire_fireball(reticle_instance.global_position)
			remove_child(reticle_instance)
		is_firing = false
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			change_zoom_level(1)
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			change_zoom_level(-1)

	if Input.is_action_just_pressed(\"reset_reticle\"):
		if not reset_reticle_pressed:
			reset_reticle_position()
			reset_reticle_pressed = true
	elif Input.is_action_just_released(\"reset_reticle\"):
		reset_reticle_pressed = false
	# Handle zoom in and zoom out actions
	if Input.is_action_just_pressed(\"zoom_in\"):
		change_zoom_level(-1)  # Zoom in by moving to a smaller zoom level
	elif Input.is_action_just_pressed(\"zoom_out\"):
		change_zoom_level(1)  # Zoom out by moving to a larger zoom level

	if Input.is_action_pressed(\"freeze\"):
		show_freeze_reticle()  # Show the freeze reticle while holding the button
	elif Input.is_action_just_released(\"freeze\"):
		trigger_freeze()  # Trigger the freeze effect on button release

# Reset reticle position to player's position
func reset_reticle_position():
	if reticle_instance and reticle_instance.is_inside_tree():
		reticle_instance.global_position = global_position
func has_authority() -> bool:
	return $MultiplayerSynchronizer.get_multiplayer_authority() == multiplayer.get_unique_id()

# Helper function to determine if the mouse is on screen
func is_mouse_on_screen() -> bool:
	var viewport_size = get_viewport().get_visible_rect().size
	var mouse_pos = get_viewport().get_mouse_position()
	return mouse_pos.x >= 0 and mouse_pos.y >= 0 and mouse_pos.x <= viewport_size.x and mouse_pos.y <= viewport_size.y

@onready var fireball_spawner = get_node(\"FireballSpawner\")


func fire_fireball(target_position):
	if has_authority() and mana >= FIREBALL_MANA_COST:
		var data := {\"peer_id\": multiplayer.get_unique_id(),\"target_position\": target_position, \"spawn_position\": global_position}
		fireball_spawner.spawn(data)
		mana -= FIREBALL_MANA_COST
		update_mana_display()
		%FireBallSFX.pitch_scale = randf_range(1.3, 1.6)
		%FireBallSFX.playing = true
	else:
		print(\"Not enough mana to cast fireball or no authority.\")



# Update mana display on the HUD
func update_mana_display():
	if has_authority():
		hud.update_mana(mana, max_mana)

# Change the zoom level based on input
func change_zoom_level(change: int):
	current_zoom_index = clamp(current_zoom_index + change, 0, ZOOM_LEVELS.size() - 1)
	target_zoom = ZOOM_LEVELS[current_zoom_index]



func _process(delta: float):
	%Lifebar.value = health
	if playercamera:
		playercamera.zoom = playercamera.zoom.lerp(target_zoom, ZOOM_SPEED * delta)
	if mana < max_mana:
		mana += MANA_REGEN_RATE * delta
		mana = min(mana, max_mana)  # Ensure mana does not exceed max
		update_mana_display()  # Update HUD with new mana level
	if damage_cooldown_timer > 0:
		damage_cooldown_timer -= delta

	# Update freeze cooldown timer
	if freeze_cooldown_timer > 0:
		freeze_cooldown_timer -= delta

	# Update reticle position based on input
	if is_firing:
		if using_mouse:
			update_reticle_position_with_mouse()
		else:
			update_reticle_position_with_joystick(delta)

	# Update freeze reticle position if aiming
	if is_aiming_freeze and freeze_reticle:
		freeze_reticle.global_position = global_position

# Update reticle position based on mouse position
func update_reticle_position_with_mouse():
	if reticle_instance and reticle_instance.is_inside_tree():
		reticle_instance.global_position = get_global_mouse_position()

# Update reticle position based on joystick direction
func update_reticle_position_with_joystick(delta: float):
	if has_authority():
		var joystick_direction_x = Input.get_action_strength(\"ui_right_stick_x\") - Input.get_action_strength(\"ui_left_stick_x\")
		var joystick_direction_y = Input.get_action_strength(\"ui_down_stick_y\") - Input.get_action_strength(\"ui_up_stick_y\")
		var joystick_direction = Vector2(joystick_direction_x, joystick_direction_y) * JOYSTICK_SENSITIVITY

		print(\"Joystick Direction X: \", joystick_direction_x)
		print(\"Joystick Direction Y: \", joystick_direction_y)

		# Ensure the joystick direction takes both positive and negative values
		if reticle_instance and reticle_instance.is_inside_tree():
			reticle_instance.position += joystick_direction * delta

			# Ensure the reticle stays within the viewport
			var viewport_rect = get_viewport_rect()
			reticle_instance.position.x = clamp(reticle_instance.position.x, -999, viewport_rect.size.x)
			reticle_instance.position.y = clamp(reticle_instance.position.y, -999, viewport_rect.size.y)

			print(\"Reticle Position: \", reticle_instance.position)  # Debug print

# Initial setup of the scene
func _ready():
	%GameOver.visible = false 
	if not is_multiplayer_authority():
		%PlayerTag.visible = true
		%Nickname.text = MultiplayerController.nickname
	add_to_group(\"players\")
	if has_authority():
		spin_flashlight.get_animation(\"Spin\").loop = true
		spin_flashlight.play(\"Spin\")
		var player_camera = get_node(\"Camera2D\")
		player_camera.make_current()
	if hud:
		update_hud()
	else:
		print(\"HUD not found. Check the node path or structure.\")
	if playercamera:
		target_zoom = playercamera.zoom
	else:
		print(\"Cannot invert transform due to zero scale\")
	assert(scale.x != 0 and scale.y != 0, \"Scale should not be zero to avoid inversion errors.\")
	target_zoom = Vector2(1, 1)
	flash_timer = Timer.new()
	flash_timer.wait_time = flash_duration
	flash_timer.one_shot = true
	flash_timer.timeout.connect(stop_flash)
	add_child(flash_timer)

# Manage physical movements and attacks
func _physics_process(delta: float) -> void:
	if has_authority(): 
		if is_knocked_back:
			knockback_timer -= delta
			if knockback_timer <= 0:
				is_knocked_back = false
				knockback_velocity = Vector2.ZERO
			velocity = knockback_velocity
		else:
			handle_dash(delta)
			handle_attack(delta)
			handle_movement(delta)

		move_and_slide()  # Apply the calculated velocity
		AnimationLoop()
		if not is_attacking:
			$AttackArea.set_monitoring(false)

# Handle movement based on player input
func handle_movement(_delta: float) -> void:
	if not is_dashing and not is_attacking:
		var input_vector: Vector2 = Vector2.ZERO
		input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
		input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

		if input_vector.length() > 0:
			input_vector = input_vector.normalized()
			moving = true
			move_direction = rad_to_deg(input_vector.angle())
		else:
			moving = false

		self.velocity = input_vector * SPEED
	move_and_slide()

# Handle dashing mechanics
func handle_dash(delta: float) -> void:
	if is_dashing:
		dash_timer -= delta
		if dash_timer <= 0:
			is_dashing = false
			update_post_dash_velocity()

	dash_cooldown_timer -= delta

	if Input.is_action_just_pressed(\"dash\") and dash_cooldown_timer <= 0 and not is_dashing and not is_attacking:
		start_dash()

# Start a dash movement
func start_dash() -> void:
	var dash_direction: Vector2 = Vector2.ZERO
	dash_direction.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	dash_direction.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if dash_direction.length() == 0:
		dash_direction = Vector2(cos(deg_to_rad(move_direction)), sin(deg_to_rad(move_direction)))

	dash_direction = dash_direction.normalized()
	self.velocity = dash_direction * DASH_SPEED
	is_dashing = true
	dash_timer = DASH_DURATION
	dash_cooldown_timer = DASH_COOLDOWN + DASH_DURATION
	moving = true
	var player_node = get_node_or_null(\".\")  # Adjust the node path as necessary

	# Adjust collision mask and layer on the Player node
	if player_node:
		#var mask = player_node.collision_mask
		#var layer = player_node.collision_layer
		%HurtArea.monitoring = false
		%AttackArea.monitoring = false
		%HurtArea.monitorable = false
		%AttackArea.monitorable = false
		
		

	else:
		print(\"Player node not found\")


	sprite.modulate.a = 0.4  # Make player semi-transparent
	%DashSFX.pitch_scale = randf_range(2,2.5)
	%DashSFX.playing = true
	



# Update velocity after dashing
func update_post_dash_velocity() -> void:
	var input_vector: Vector2 = Vector2.ZERO
	input_vector.x = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	input_vector.y = Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")

	if input_vector.length() > 0:
		input_vector = input_vector.normalized()
		self.velocity = input_vector * SPEED
	else:
		self.velocity = Vector2.ZERO

	var player_node = get_node_or_null(\".\")  # Adjust the node path as necessary

	# Adjust collision mask and layer on the Player node
	if player_node:
		%HurtArea.monitoring = true
		%AttackArea.monitoring = true
		%HurtArea.monitorable = true
		%AttackArea.monitorable = true

	
	else:
		print(\"Player node not found\")

	sprite.modulate.a = 1.0  # Restore full opacity
	push_enemies_away_from_landing(global_position)

func push_enemies_away_from_landing(landing_position: Vector2) -> void:
	var enemies = get_tree().get_nodes_in_group(\"enemies\")
	for enemy in enemies:
		var enemy_collision = enemy.get_node(\"CollisionPolygon2D\")  # Ensure correct node name
		if enemy_collision and enemy_collision.global_position.distance_to(landing_position) < 50:  # Example distance
			var push_direction = enemy.last_movement_direction  # Use the enemy's last movement direction
			if push_direction.length() == 0:
				push_direction = (enemy.global_position - landing_position).normalized()  # Fallback if no movement direction
			var push_distance = 10  # Adjust based on your game's needs
			enemy.global_position += push_direction * push_distance
			print(\"Pushed enemy:\", enemy.name)  # Debug print


# Handle attack mechanics
func handle_attack(delta: float) -> void:
	attack_timer -= delta
	if attack_timer <= 0 and is_attacking:
		is_attacking = false

	if Input.is_action_just_pressed(\"attack\") and not is_attacking and not is_dashing:
		start_attack()

# Start an attack sequence
func start_attack() -> void:
	is_attacking = true
	attack_timer = ATTACK_DURATION
	self.velocity = Vector2.ZERO
	$AttackArea.set_monitoring(true)
	%AttackSFX.pitch_scale = randf_range(.9,1.3)
	%AttackSFX.playing = true



# Manage animations based on state
func AnimationLoop():
	if is_attacking:
		var attack_anim = \"Melee_\" + anim_direction
		get_node(\"AnimationPlayer\").play(attack_anim)
	else:
		if moving:
			if move_direction >= -15 and move_direction < 15:
				anim_direction = \"E\"
			elif move_direction >= 15 and move_direction < 60:
				anim_direction = \"SE\"
			elif move_direction >= 60 and move_direction < 120:
				anim_direction = \"S\"
			elif move_direction >= 120 and move_direction < 165:
				anim_direction = \"SW\"
			elif move_direction >= -60 and move_direction < -15:
				anim_direction = \"NE\"
			elif move_direction >= -120 and move_direction < -60:
				anim_direction = \"N\"
			elif move_direction >= -165 and move_direction < -120:
				anim_direction = \"NW\"
			elif move_direction >= 165 or move_direction < -165:
				anim_direction = \"W\"
			anim_mode = \"Walk\"
		else:
			anim_mode = \"Idle\"

		var animation_name = anim_mode + \"_\" + anim_direction
		get_node(\"AnimationPlayer\").play(animation_name)


# Update HUD with current health and mana
func update_hud() -> void:
	if has_authority():
		if hud:
			hud.update_health(health, max_health)
			hud.update_mana(mana, max_mana)
		else:
			print(\"HUD not found. Check the node path or structure.\")

# Detect enemy hits within attack area
func _on_attack_area_area_entered(area):
	if area.is_in_group(\"enemies\"):
		print(\"Enemy hit detected.\")
	var enemy = area
	while enemy and not enemy.has_method(\"apply_damage\"):
		enemy = enemy.get_parent()
	if is_instance_valid(enemy):
		enemy.apply_damage(enemyattackdamage)
	else:
		print(\"apply_damage method not found in the parent hierarchy\")


## Sends a request to the server to apply damage
#func apply_damage(damage_amount: int):
	#if multiplayer.is_server():
		#_apply_damage(damage_amount)
	#else:
		#rpc_id(1, \"_request_damage\", damage_amount)

# Applies damage to the player

func apply_damage(damage_amount: int):
	if has_authority():
		health -= damage_amount
		if health <= 0:
			die()
		update_hud()
		start_flash()

#@rpc(\"any_peer\", \"call_local\")
#func _request_damage(damage_amount: int):
	#if multiplayer.is_server():
		#rpc_id(multiplayer.get_unique_id(), \"_apply_damage\", damage_amount)


# Asynchronous function to handle controller vibration
func start_controller_vibration(duration: float, weak_magnitude: float, strong_magnitude: float):
	# Iterate through all connected joypads
	for joypad_id in Input.get_connected_joypads():
		Input.start_joy_vibration(joypad_id, weak_magnitude, strong_magnitude, duration)

	# Wait for the specified duration before stopping the vibration
	await get_tree().create_timer(duration).timeout
	for joypad_id in Input.get_connected_joypads():
		Input.stop_joy_vibration(joypad_id)

# Apply knockback to the player
func apply_knockback(source_position: Vector2, power: float):
	var direction = (global_position - source_position).normalized()
	knockback_velocity = direction * power
	is_knocked_back = true
	knockback_timer = 0.2
	is_dashing = false
	is_attacking = false

# Timer for visual effects
var flash_timer: Timer

# Start flashing effect on taking damage
func start_flash():
	sprite.modulate = Color(1, 0, 0)
	flash_timer.start()

# Stop flashing effect
func stop_flash():
	sprite.modulate = Color(1, 1, 1)

@onready var fret_spawner = get_node(\"FreezeReticleSpawner\")

# Function to show the freeze reticle without triggering freeze
func show_freeze_reticle():
	if has_authority() and freeze_reticle == null and freeze_cooldown_timer <= 0:
		var data := {\"peer_id\": multiplayer.get_unique_id()}
		freeze_reticle = fret_spawner.spawn(data)
		freeze_reticle.global_position = global_position
		freeze_reticle.z_index = 5
		var scale_factor = (4.25 * FREEZE_RADIUS) / freeze_reticle.get_node(\"Sprite2D\").texture.get_size().x
		freeze_reticle.scale = Vector2(scale_factor, scale_factor)
		freeze_reticle.freeze_duration = FREEZE_DURATION  # Set the freeze duration for the reticle
		is_aiming_freeze = true  # Indicate that the player is aiming the freeze spell

# Function to trigger freeze and remove the reticle after the freeze duration
func trigger_freeze():
	if has_authority() and freeze_reticle and mana >= FREEZE_MANA_COST and freeze_cooldown_timer <= 0:
		freeze_cooldown_timer = FREEZE_COOLDOWN
		mana -= FREEZE_MANA_COST  # Deduct mana cost
		update_mana_display()  # Update HUD after mana change
		is_aiming_freeze = false  # Indicate that the player is no longer aiming the freeze spell
		freeze_reticle.get_node(\"Sprite2D\").modulate.a = 1.0  # Set alpha to 1 when spell is activated
		freeze_reticle.activate_spell()  # Activate the spell to start freezing enemies
		var enemies = get_tree().get_nodes_in_group(\"enemies\")
		for enemy in enemies:
			if enemy.global_position.distance_to(freeze_reticle.global_position) <= FREEZE_RADIUS:
				enemy.freeze(FREEZE_DURATION)
		# Set a timer to remove the reticle after the freeze duration
		var timer = Timer.new()
		timer.wait_time = FREEZE_DURATION
		timer.one_shot = true
		timer.timeout.connect(_on_freeze_duration_timeout)
		add_child(timer)
		timer.start()
	else:
		print(\"Cannot cast freeze: insufficient mana, skill is on cooldown, or no authority.\")

# Function to remove the reticle after the freeze duration
func _on_freeze_duration_timeout():
	if has_authority() and freeze_reticle:
		freeze_reticle.queue_free()
		freeze_reticle = null

# Handle player death
var is_dead = false

func die():
	if is_dead:
		return
	is_dead = true
	%DeathSFX.playing = true
	print(\"Player has died\")
	set_physics_process(false)
	set_process_input(false)
	var animation_player = get_node(\"AnimationPlayer\")
	if animation_player:
		animation_player.play(\"Death\")

		
	

func revive():
	print(\"Player has been revived\")
	set_physics_process(true)
	set_process_input(true)
	health = 35

func _on_hurt_area_area_entered(area: Area2D) -> void:
	if damage_cooldown_timer <= 0:
		apply_damage(randf_range(2,5))
		start_flash()
		apply_knockback(area.global_position, 500)
		%HurtSFX.playing = true
		damage_cooldown_timer = DAMAGE_COOLDOWN
	else:
		print(\"Damage action is on cooldown.\")
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_oq15k"]
shader = ExtResource("1_0vyox")
shader_parameter/color = Color(0.704836, 0.563498, 0.0436016, 1)
shader_parameter/width = 1.0
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)

[sub_resource type="Animation" id="Animation_runqe"]
resource_name = "Death"
length = 2.0
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.107871, 0.214998, 0.322125, 0.44342, 0.555269),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [218, 219, 220, 221, 222, 223]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("GameOver:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("GameOver:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.6),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(-577, -723), Vector2(-576, -185)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("GameOver:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.6),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 1, 1, 0), Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_3i2lq"]
resource_name = "Idle_E"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [112, 113, 114, 115, 114, 113]
}

[sub_resource type="Animation" id="Animation_7hu3d"]
resource_name = "Idle_N"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [56, 57, 58, 59, 58, 57]
}

[sub_resource type="Animation" id="Animation_r5ik8"]
resource_name = "Idle_NE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [84, 85, 86, 87, 86, 85]
}

[sub_resource type="Animation" id="Animation_6cj71"]
resource_name = "Idle_NW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [28, 29, 30, 31, 30, 29]
}

[sub_resource type="Animation" id="Animation_lewys"]
resource_name = "Idle_S"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [168, 169, 170, 171, 170, 169]
}

[sub_resource type="Animation" id="Animation_vfo53"]
resource_name = "Idle_SE"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [140, 141, 142, 143, 142, 141]
}

[sub_resource type="Animation" id="Animation_iysvl"]
resource_name = "Idle_SW"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [196, 197, 198, 199, 198, 197]
}

[sub_resource type="Animation" id="Animation_5dt8w"]
resource_name = "Idle_W"
length = 1.8
loop_mode = 1
step = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 2, 1]
}

[sub_resource type="Animation" id="Animation_anl57"]
resource_name = "Melee_E"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [124, 125, 126, 127, 128]
}

[sub_resource type="Animation" id="Animation_qicak"]
resource_name = "Melee_N"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [68, 69, 70, 71, 72]
}

[sub_resource type="Animation" id="Animation_oc22q"]
resource_name = "Melee_NE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [96, 97, 98, 99, 100]
}

[sub_resource type="Animation" id="Animation_htqhx"]
resource_name = "Melee_NW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [40, 41, 42, 43, 44]
}

[sub_resource type="Animation" id="Animation_05pa4"]
resource_name = "Melee_S"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [180, 181, 182, 183, 184]
}

[sub_resource type="Animation" id="Animation_plnnu"]
resource_name = "Melee_SE"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [152, 153, 154, 155, 156]
}

[sub_resource type="Animation" id="Animation_tpvkt"]
resource_name = "Melee_SW"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [208, 209, 210, 211, 212]
}

[sub_resource type="Animation" id="Animation_hajc2"]
resource_name = "Melee_W"
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [12, 13, 14, 15, 16]
}

[sub_resource type="Animation" id="Animation_lp6gn"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}

[sub_resource type="Animation" id="Animation_d726y"]
resource_name = "Walk_E"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [116, 117, 118, 119, 120, 121, 122, 123]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_bweqv"]
resource_name = "Walk_N"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [60, 61, 62, 63, 64, 65, 66, 67]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_hjuoo"]
resource_name = "Walk_NE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [88, 89, 90, 91, 92, 93, 94, 95]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_08wxv"]
resource_name = "Walk_NW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [32, 33, 34, 35, 36, 37, 38, 39]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_03p2a"]
resource_name = "Walk_S"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [172, 173, 174, 175, 176, 177, 178, 179]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_a1mkv"]
resource_name = "Walk_SE"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [144, 145, 146, 147, 148, 149, 150, 151]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_web34"]
resource_name = "Walk_SW"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [200, 201, 202, 203, 204, 205, 206, 207]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}

[sub_resource type="Animation" id="Animation_u4w1h"]
resource_name = "Walk_W"
length = 1.6
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [4, 5, 6, 7, 8, 9, 10, 11]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("SFX/FootStepsSFX:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("SFX/FootStepsSFX:pitch_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0.8, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [1.0, 1.5]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_glaps"]
_data = {
"Death": SubResource("Animation_runqe"),
"Idle_E": SubResource("Animation_3i2lq"),
"Idle_N": SubResource("Animation_7hu3d"),
"Idle_NE": SubResource("Animation_r5ik8"),
"Idle_NW": SubResource("Animation_6cj71"),
"Idle_S": SubResource("Animation_lewys"),
"Idle_SE": SubResource("Animation_vfo53"),
"Idle_SW": SubResource("Animation_iysvl"),
"Idle_W": SubResource("Animation_5dt8w"),
"Melee_E": SubResource("Animation_anl57"),
"Melee_N": SubResource("Animation_qicak"),
"Melee_NE": SubResource("Animation_oc22q"),
"Melee_NW": SubResource("Animation_htqhx"),
"Melee_S": SubResource("Animation_05pa4"),
"Melee_SE": SubResource("Animation_plnnu"),
"Melee_SW": SubResource("Animation_tpvkt"),
"Melee_W": SubResource("Animation_hajc2"),
"RESET": SubResource("Animation_lp6gn"),
"Walk_E": SubResource("Animation_d726y"),
"Walk_N": SubResource("Animation_bweqv"),
"Walk_NE": SubResource("Animation_hjuoo"),
"Walk_NW": SubResource("Animation_08wxv"),
"Walk_S": SubResource("Animation_03p2a"),
"Walk_SE": SubResource("Animation_a1mkv"),
"Walk_SW": SubResource("Animation_web34"),
"Walk_W": SubResource("Animation_u4w1h")
}

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_v3cba"]
properties/0/path = NodePath("AnimationPlayer:current_animation")
properties/0/spawn = true
properties/0/replication_mode = 2
properties/1/path = NodePath("Sprite2D:modulate")
properties/1/spawn = true
properties/1/replication_mode = 2
properties/2/path = NodePath("AttackArea:monitoring")
properties/2/spawn = true
properties/2/replication_mode = 1
properties/3/path = NodePath(".:health")
properties/3/spawn = true
properties/3/replication_mode = 2
properties/4/path = NodePath(".:mana")
properties/4/spawn = true
properties/4/replication_mode = 2
properties/5/path = NodePath(".:enemyattackdamage")
properties/5/spawn = true
properties/5/replication_mode = 1
properties/6/path = NodePath(".:position")
properties/6/spawn = true
properties/6/replication_mode = 1
properties/7/path = NodePath(".:collision_layer")
properties/7/spawn = true
properties/7/replication_mode = 1
properties/8/path = NodePath(".:collision_mask")
properties/8/spawn = true
properties/8/replication_mode = 1

[sub_resource type="CanvasTexture" id="CanvasTexture_ribq6"]

[sub_resource type="StyleBoxTexture" id="StyleBoxTexture_cden2"]
texture = SubResource("CanvasTexture_ribq6")
modulate_color = Color(0.352941, 1, 0, 1)

[sub_resource type="Animation" id="Animation_4b3ew"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 3
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_gkyet"]
resource_name = "Spin"
length = 5.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 3
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.633333, 1.0989, 1.6, 2, 2.63333, 3.0989, 3.6, 3.93333, 4.1958, 4.4955, 4.7952, 4.995),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.0, -0.261799, 0.0, -0.261799, 0.0, -0.261799, 0.0, -0.261799, 0.0, -0.261799, 0.0, -0.261799, 0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_7lbrm"]
_data = {
"RESET": SubResource("Animation_4b3ew"),
"Spin": SubResource("Animation_gkyet")
}

[node name="Player" type="CharacterBody2D"]
z_index = 6
y_sort_enabled = true
collision_layer = 2147485697
collision_mask = 2147485696
script = SubResource("GDScript_48d8e")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
y_sort_enabled = true
position = Vector2(-0.68, 0.32)
scale = Vector2(0.847194, 2.83933)
polygon = PackedVector2Array(-2.61988, -3.47826, -4, 6, 8.51462, 4.86956, 7.85965, -3.47826)

[node name="Sprite2D" type="Sprite2D" parent="."]
y_sort_enabled = true
texture_filter = 1
material = SubResource("ShaderMaterial_oq15k")
position = Vector2(1.32, -5.68)
scale = Vector2(0.63, 0.63)
texture = ExtResource("1_2aoey")
hframes = 28
vframes = 8
frame = 4

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(0.32, 13.32)
position_smoothing_enabled = true
position_smoothing_speed = 4.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
unique_name_in_owner = true
libraries = {
"": SubResource("AnimationLibrary_glaps")
}

[node name="SFX" type="Node2D" parent="."]

[node name="AttackSFX" type="AudioStreamPlayer2D" parent="SFX"]
unique_name_in_owner = true
stream = ExtResource("3_1edxq")
volume_db = -0.105
pitch_scale = 1.3
bus = &"Player"

[node name="FireBallSFX" type="AudioStreamPlayer2D" parent="SFX"]
unique_name_in_owner = true
stream = ExtResource("4_qg008")
volume_db = 0.886
pitch_scale = 1.3
bus = &"Player"

[node name="DashSFX" type="AudioStreamPlayer2D" parent="SFX"]
unique_name_in_owner = true
stream = ExtResource("5_i2e14")
volume_db = -6.325
bus = &"Player"

[node name="FootStepsSFX" type="AudioStreamPlayer2D" parent="SFX"]
stream = ExtResource("7_fqp02")
bus = &"SFX"

[node name="HurtSFX" type="AudioStreamPlayer2D" parent="SFX"]
unique_name_in_owner = true
stream = ExtResource("7_dj186")

[node name="DeathSFX" type="AudioStreamPlayer2D" parent="SFX"]
unique_name_in_owner = true
stream = ExtResource("8_c81l1")

[node name="FireballSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://fireball.tscn")
script = ExtResource("6_8tcqq")

[node name="FreezeReticleSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://FreezeReticle.tscn")
script = ExtResource("7_p1r25")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_v3cba")

[node name="HurtArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
collision_layer = 0
collision_mask = 40

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="HurtArea"]
z_index = 4
y_sort_enabled = true
position = Vector2(-9.53674e-07, 18)
rotation = 0.0508076
scale = Vector2(0.813056, 0.353188)
polygon = PackedVector2Array(-4.54253, -18.5009, -0.27956, -12.6557, 6.61045, -15.7932, 7.68726, -26.2768, 8.18804, -65.9868, 1.75863, -76.3366, -2.73725, -61.5358, -4.34456, -40.7289)

[node name="AttackArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
z_index = 4
y_sort_enabled = true
position = Vector2(0.32, 13.32)
collision_layer = 16388
collision_mask = 8
monitoring = false

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="AttackArea"]
z_index = 4
y_sort_enabled = true
position = Vector2(-6, 23)
rotation = 0.0508076
scale = Vector2(2.30205, 1)
polygon = PackedVector2Array(-19.1623, -20.7865, -6.42667, -15.2684, 6.61045, -15.7932, 23.1329, -35.7506, 14.64, -65.7965, -0.161915, -86.0922, -13.9931, -62.4446, -16.9785, -40.0667)

[node name="BuildingFade" type="Area2D" parent="."]
collision_layer = 2147483648
collision_mask = 2147483648

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="BuildingFade"]
y_sort_enabled = true
position = Vector2(-0.68, 0.32)
scale = Vector2(0.847194, 2.83933)
polygon = PackedVector2Array(-2.61988, -3.47826, -4, 6, 8.51462, 4.86956, 7.85965, -3.47826)

[node name="GameOver" type="Label" parent="."]
unique_name_in_owner = true
offset_left = -576.0
offset_top = -185.0
offset_right = 575.0
offset_bottom = 465.0
theme_override_colors/font_color = Color(0.990048, 0.134735, 0.0947915, 1)
theme_override_colors/font_shadow_color = Color(0.400663, 0.0100097, 0.00555463, 1)
theme_override_fonts/font = ExtResource("8_uglhr")
theme_override_font_sizes/font_size = 100
text = "Try Harder..."
horizontal_alignment = 1
vertical_alignment = 1

[node name="PlayerTag" type="Control" parent="."]
unique_name_in_owner = true
visible = false
layout_mode = 3
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -24.0
offset_top = -35.0
offset_right = 20.0
offset_bottom = -19.0
grow_horizontal = 2

[node name="Lifebar" type="ProgressBar" parent="PlayerTag"]
unique_name_in_owner = true
y_sort_enabled = true
clip_contents = true
custom_minimum_size = Vector2(100, 5)
layout_mode = 1
anchors_preset = -1
anchor_right = 1.032
anchor_bottom = 0.7
offset_left = -2.0
offset_top = 9.0
offset_right = 56.592
offset_bottom = 11.8
scale = Vector2(0.452946, 0.159096)
theme_override_styles/fill = SubResource("StyleBoxTexture_cden2")
value = 100.0
rounded = true
show_percentage = false

[node name="Nickname" type="Label" parent="PlayerTag"]
unique_name_in_owner = true
layout_mode = 0
offset_left = -7.0
offset_top = -10.0
offset_right = 53.0
offset_bottom = 13.0
theme_override_font_sizes/font_size = 14
horizontal_alignment = 1
vertical_alignment = 1

[node name="Flashlight" type="PointLight2D" parent="."]
unique_name_in_owner = true
visible = false
z_index = -1
scale = Vector2(0.46669, 0.46669)
color = Color(1, 1, 0.639216, 1)
energy = 0.2
texture = ExtResource("10_cjekt")

[node name="SpinFlashlight" type="AnimationPlayer" parent="Flashlight"]
unique_name_in_owner = true
libraries = {
"": SubResource("AnimationLibrary_7lbrm")
}
autoplay = "Spin"

[connection signal="area_entered" from="HurtArea" to="." method="_on_hurt_area_area_entered"]
[connection signal="area_entered" from="AttackArea" to="." method="_on_attack_area_area_entered"]
